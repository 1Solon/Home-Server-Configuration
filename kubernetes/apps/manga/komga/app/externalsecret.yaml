---
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: komga
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword-connect
  target:
    name: komga-secret
    creationPolicy: Owner
    template:
      type: "Opaque"
      data:
        application.yml: |
          komga:
            ## Comment if you don't want automatic account creation.
            oauth2-account-creation: true
            database:
              # sets the retry timeout when SQLITE_BUSY error happens
              busy-timeout: 60s

              # changes the journal mode
              # accepted values are: DELETE, TRUNCATE, PERSIST, MEMORY, WAL, OFF
              # most likely to be set to wal if needed, check https://sqlite.org/wal.html for more details
              journal-mode: wal

              # pool size will determine the number of connections in the pool
              # this takes precedence over max-pool-size if set
              # defaults to undefined
              pool-size: 4

              # max-pool-size will determine the maximum number of connections in the pool
              # when set, the number of connections is set to the number of available processors capped at max-pool-size
              # defaults to 1
              max-pool-size: 8

              # pragmas accepts a list of key/value pairs where:
              # - key is the pragma name (see https://www.sqlite.org/pragma.html)
              # - value is the pragma value
            pragmas:
              optimize: 0xfffe
              page_size: 4096 # Increase page size to improve I/O performance
              synchronous: NORMAL # Balance between performance and data safety
              cache_size: -2000 # Increase cache size to improve query speed (in pages)
              temp_store: MEMORY # Store temporary tables in memory to improve access speed
              trusted_schema: false # Disable trusted mode to improve performance
          spring:
            security:
                oauth2:
                    client:
                        registration:
                            authentik:
                                provider: authentik
                                client-id: "{{ .CLIENT_ID }}"
                                client-secret: "{{ .CLIENT_SECRET }}"
                                client-name: authentik
                                scope: openid,email,profile
                                authorization-grant-type: authorization_code
                                redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
                        provider:
                            authentik:
                                user-name-attribute: preferred_username
                                issuer-uri: https://sso.solonsstuff.com/application/o/komga/
  dataFrom:
    - extract:
        key: komga